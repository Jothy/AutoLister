import sys

from PyQt5 import QtCore, QtGui, QtWidgets,Qt

import time, datetime, os
import numpy as np
from subprocess import Popen, PIPE
from datetime import date, timedelta as td

from MainWindow import Ui_Dialog

import reportlab
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch, cm

#Hidden imports for .exe compilation
import packaging
import packaging.version
import packaging.specifiers
import packaging.requirements

#To bundle dlls into to exe with Pyinstaller
import ctypes

if getattr(sys, 'frozen', False):
  # Override dll search path.
  ctypes.windll.kernel32.SetDllDirectoryW('C:/Anaconda/Library/bin')
  # Init code to load external dll
  #ctypes.CDLL('D:/Projects/AutoLister/mkl_def.dll')
  # Restore dll search path.
  ctypes.windll.kernel32.SetDllDirectoryW(sys._MEIPASS)



class StartQT(QtWidgets.QDialog):
    def __init__(self, parent=None):
        QtWidgets.QWidget.__init__(self, parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.DatesToQuery=[]
        self.DgatePath=self.ui.lineEditDgatePath.text()
        self.PatNum=0

        #Initialize the app
        self.Initialize()

        #Connect signal slots
        self.ui.pushButtonDgatePath.clicked.connect(self.SetDgatePath)
        self.ui.pushButtonQuery.clicked.connect(self.QueryDB)
        self.ui.pushButtonPrint.clicked.connect(self.CreatePDFReport)

        self.DaysInRange()
        self.PatientList=[]
        self.ui.lineEditSrvName.setText('CONQUESTSRV1')


    def Initialize(self):
        self.ui.dateEditStart.setDate(QtCore.QDate.currentDate())
        self.ui.dateEditEnd.setDate(QtCore.QDate.currentDate())


    def SetDgatePath(self):
        CurDir=QtWidgets.QFileDialog.getExistingDirectory()
        self.ui.lineEditDgatePath.clear()
        self.ui.lineEditDgatePath.setText(CurDir)
        self.DgatePath=CurDir

    def DaysInRange(self):
        self.DatesToQuery.clear()
        self.StartDate=self.ui.dateEditStart.date().toPyDate()
        self.EndDate=self.ui.dateEditEnd.date().toPyDate()
        delta=self.EndDate-self.StartDate
        for i in range(delta.days+1):
            self.DatesToQuery.append(self.StartDate+td(days=i))

    #Testdata study date in ConquestMaster =27022017
    def QueryDB(self):
        self.PatNum=0
        self.ui.textEdit.clear()
        self.ui.progressBar.reset()
        QtWidgets.qApp.setOverrideCursor(QtCore.Qt.WaitCursor)
        self.DaysInRange()
        print(np.size(self.DatesToQuery),":No. of days to query")
        os.chdir(self.DgatePath)
        for x in range(0,np.size(self.DatesToQuery),1):
            ProgressValue=(x+1)/np.size(self.DatesToQuery)*100.0
            self.ui.progressBar.setValue(ProgressValue)
            QtWidgets.QApplication.processEvents()
            curDate=self.DatesToQuery[x].strftime("%Y%m%d")
            argStr="--studyfinder:"+self.ui.lineEditSrvName.text()+"|"+curDate+"|"+"%s %s %s"
            #print(argStr)
            PtLst=Popen(["dgate64.exe", argStr], stdin=PIPE, stdout=PIPE, stderr=PIPE,shell=False)
            output,err=PtLst.communicate()
            output1=output.decode(encoding='UTF-8')
            output2=output1.split(sep='\n')
            for y in range(0,np.size(output2),1):
                if (len(output2[y])>1):
                    self.ui.textEdit.append(output2[y])
                    self.PatNum=self.PatNum+1
                    self.PatientList.append(str(self.PatNum)+' ] '+output2[y])
        #Restore normal cursor
        QtWidgets.qApp.restoreOverrideCursor()
        self.ui.textEdit.append("****************************************************************")
        self.ui.textEdit.append("Total series found:"+str(self.PatNum))


    def CreatePDFReport(self):
        GenBy = QtWidgets.QInputDialog.getText(self, "Name", "Generated by:", 0)
        # Setting up header & preparing page
        today = date.today()
        day = str(today.day)
        month = str(today.month)
        year = str(today.year)
        dateStr = day + '_' + month + '_' + year
        self.reportStr = "C:/Apps"+"/"+dateStr+ '.pdf'
        c = canvas.Canvas(self.reportStr, pagesize=A4)
        c.line(50, 800, 580,800)
        c.drawString(50, 775,'Patients studied from: '+str(self.StartDate)+'  to '+str(self.EndDate))
        c.drawString(50,750,"Report generated by: "+str(GenBy[0])+"  on  "+dateStr+' @ '+str(self.ui.lineEditSrvName.text()))
        try:
            c.drawImage('C:\Apps\AutoLister.png',425,745,width=160.0,height=50.0,mask='auto')
        except:
            print("No icon file found")
        c.line(50,740,580,740)

        PgNum=0
        for x in range(1,np.size(self.PatientList)+1,1):
            if (x%30==0):
                print(x)
                c.showPage()
                c.line(50,740, 580, 800)
                PgNum=0
                #Reset PgNum index on each new page
            else:
                PgNum=PgNum+1
                c.drawString(50,(720-20*PgNum),self.PatientList[x-1])


        # Save the PDF
        c.save()
        os.startfile(self.reportStr)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    myapp = StartQT()
    myapp.show()
    myapp.setWindowTitle('AutoLister')
    sys.exit(app.exec_())

